(define (player-who-moves a b axis dir) (if (typ? b T_TERRAIN) MOVE_ME MOVE_BOTH))
(define player-draw (base-draw 0.3 1.0 0.3))
;(define (player-tick me) (accel me (map (lambda (x) (* 10 x)) (get-axis me))))
(define (bound x b) (if (> x b) b (if (< x (- b)) (- b) x)))

(define (player-pushed me him axis dir dx dv)
	(let ((state (get-state me)))
	(if (< axis 2)
		(set-slider state axis 0)
		(if (< dir 0)
			(let ((vel (get-vel him me)))
				(set-slider state 0 (bound (car vel) 128))
				(set-slider state 1 (bound (cadr vel) 128))
				(set-slider state 2 1)
			)
		)
	)
	)
	R_PASS
)
(define (player-tick me)
	(let ((state (get-state me)))
	(let ((axis (get-axis me)) (grounded (> (get-slider state 2) 0)) (slider (list (get-slider state 0) (get-slider state 1))))
		(let ((dx (map (lambda (a s) (bound (- (* 4 a) s) 10)) axis slider)))
			(set-slider state 0 (+ (car slider) (car dx)))
			(set-slider state 1 (+ (cadr slider) (cadr dx)))
			(let ((d (if grounded 1 2)))
				(accel me (list (quotient (car dx) d) (quotient (cadr dx) d) 0))
			)
		)
		(if (and grounded (get-button me))
			(accel me (list 0 0 -192))
		)
		(set-slider state 2 0)
		;(if (get-button me) (kill me) '())
	)
	)
)
;(define (player-tick me) (let ((axis (get-axis me))) (accel me (* 1 (car axis)) (* 1 (cadr axis)))))
(define (mk-player pos)
	(set-tick (set-draw (set-who-moves (set-pushed (player-create-tmp pos 3) player-pushed) player-who-moves) player-draw) player-tick)
)
