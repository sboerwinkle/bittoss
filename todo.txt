TODO:
/ Server exiting cancels input thread but doesn't exit app
/ Complete switch to Scheme ref-counting
	/ References seem to be resolved, maybe
	/ Next step is actually doing our own allocation and reclaiming
		Is this really, truly done?? Wow
/ Switch to C-land
	/ Scheme is all torn out now, even if it no longer compiles quite...
	/ Get it to run again
/ Movement shouldn't be so wacky - friction should be along a vector towards the destination.
	This would still maintain the "squares come out of spinning and shooting" thing
/ Better color options for players I guess
/ Turn off TCP scheduling heuristic for more real-time communication
! Name display (maybe just show chat msg over head)
	Abandoned in favor of individual colors b/c I'm lazy
/ Predictive state
	/ State cloning operation
! Need to switch the handler-serialization scheme to use compile-time enums instead of string lookup
	Necessary for proper serialization
	/ Jokes on me, turns out you can count without using enums lol
/ Velbox (R-trees to handle collisions)
- Tweak platform spawning
/ Flags explode on contact <3
- User platforms expire?
	- fade to grey near end of life
- Particles on death
	This would be nice for user platforms, but it's actually kinda weird.
	We can't really make them "next tick" since the parent object won't exist
	We could add them in the middle of the tick, but we'd need to properly initialize `old` which could be hard
	Maybe the thing to do is add them to some list to be added at the end of this tick,
		so they aren't used in collisions but they still appear where they are expected to
	The only tricky bit becomes that the parent velbox will probably be removed by that point
		Best solution I can see to this is to just keep it around (until the deads are cleaned)
		and just add a check to ignore dead things in collisions.
		Kinda rough but oh well?
/ User platforms less prone to jank
	! Magic expanding pellet magic
	/ Should also refund player resources if they have to abort
/ Automatic state sync on join
	Close enough, there's a message for new players at least
- Some way to use tools
	I was going to go with hands but then I realized hands are dumb
	Everyone is going to get hats
	If you have two hats on, any hat that isn't on top gets dropped
	Unlike hands, the active hat is actually on you
	You do have "hat racks" (definitely not hands) to manage a hat(s) not on your head
		Oh my god I've been able to store numbers on things this entire time
			Hat racks that have the same "order" are of course incinerated
		Even so, I like the hat lore better
		You're not manipulating an item, that's slow and cumbersome
		The hat is responding to your state, the hat is doing its own thing
	With hats, the only controls you need are "cycle hat" and "throw hat"
		"throw hat" projects a hat picker-upper if you aren't wearing a hat
		This keeps a reference to you, and attaches a hat-rack at the relevant order when it hits
		And if multiple hit at once, we already handled that case!
	And we probably keep LMB / RMB as well.
/ State serizalization
	/ Save to file
	/ Send over wire
	/ dynamic joining
- "Finish" edit tooling
	- Bulk selection in area
	- Flips / rotations on selected items
	- resizing existing things
		- stretching an edge to a desired point
			This operation can fail since object widths are always even!

- CTF scoring plz


Okay, we're well on our way!
We've got
a probably-working physics engine
some basic Allegro thrown in


-Mess around / basic level design
-Enemies, which entail the following objects:
	optons
	bullets
	guns?
	A slightly different build function for enemies, so they release optons and respond appropriately
-More level design
-Menu level, which entails another object:
	level warp blocks
-What's this, more level design?



At this point things have gotten extremely vague, and it's really just a wishlist that can be implemented in any order:

Crafting stations
Cabinets (for storage!)
/ Proper collision detection with libVelbox (Or maybe just a nice B-tree?)
Flying transport
Gunship
Missilecopter
Construction walker
Destruction walker
Battle platform walker
Powered exoskeleton
Plasma turret
explosives
buttons
missiles
Nicer particles: blood, guts, gears, dirt, shrapnel
Laz gun
Chaingun
Shotgun
Grenade launcher
Sticky launcher
Metal crate launcher
Flamethrower
Missile launcher
Knives
Swords
weapon mods
Mover blocks
destructible terrain blocks
Apple trees
More enemy types
pouncer enemies
Crawlers
Clams
Missile Clams
Sound fx
controller support
multiplayer support
Planets (freefall launch system)
Swarming, muliplying insects
Modular Maimbots
Dialog (monolog really)
Allies
Autoturret
Sticky Autoturrets
Glass
Patrol patterns for enemies
Earthworms
Jetpack
Tentacle beasts (Dwell in caverns?)
Tentacle eggs
Level editor
Portals
Boosters
Building materials (break on heavy impact)
Kudzu
Basic construction powers - think King Arthur's gold-style gameplay
Stations with 'divert power' mechanics
Station battles
